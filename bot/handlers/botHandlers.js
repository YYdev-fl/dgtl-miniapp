const { sendUserData } = require('../services/apiService');
const { WEB_APP_URL } = require('../config/botConfig');

const handleStartCommand = async (bot, msg) => {
  const chatId = msg.chat.id;
  const telegramId = Number(msg.from.id);
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';

  console.log('Processing start command for user:', {
    chatId,
    telegramId,
    firstName,
    lastName,
    username
  });

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');

    console.log('Attempting to send user data to server...');
    const userData = {
      telegramId,
      firstName,
      lastName,
      username,
    };

    const response = await sendUserData(userData);
    console.log('Server response:', response);
    
    if (response.success) {
      console.log('Successfully synced user data');
      
      const keyboard = {
        inline_keyboard: [
          [{ text: '–ò–≥—Ä–∞—Ç—å!', web_app: { url: WEB_APP_URL } }]
        ]
      };

      console.log('Using WEB_APP_URL:', WEB_APP_URL);

      await bot.sendMessage(
        chatId, 
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DGTL P2E –∏–≥—Ä—É, ${firstName}! üéÆ\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω.`,
        { reply_markup: keyboard }
      );
    } else {
      console.error('Failed to sync account:', response);
      throw new Error('Failed to sync account');
    }
  } catch (error) {
    console.error('Error in handleStartCommand:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(
      chatId, 
      '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
    
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    throw error;
  }
};

module.exports = {
  handleStartCommand,
};
